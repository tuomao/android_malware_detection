# coding: utf-8
__author__ = 'tuomao'
# coding: utf-8
import sys

from sklearn import metrics, cross_validation
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_selection import SelectKBest, chi2
from sklearn.naive_bayes import MultinomialNB
import torndb
import numpy as np

from model import dbsetting
from model.db_tool import DbTool


# 设置编码
reload(sys)
sys.setdefaultencoding("utf-8")

db = torndb.Connection(**dbsetting.DATABASE['mysql-remote'])
db_tool = DbTool(db)

# 从数据库获取数据
train_data, permission_feature_names = db_tool.get_new_train_data()
x_train_permission = np.array(train_data['permission-data'])
x_train_string = train_data['string-data']
y_train = train_data['target']

# 转化字符串特征
vectorizer = CountVectorizer(decode_error='ignore')
x_train_string = vectorizer.fit_transform(x_train_string)
string_feature_names = vectorizer.get_feature_names()


def select_permission(k):
    '''
    :param k: 选择的特征的个数
    :return:selected_x_train_permission 选择出的权限
            selected_permission_feature_names 选择出的特征名称
    '''

    global x_train_permission
    global permission_feature_names
    permission_selector = SelectKBest(chi2, k=k)
    selected_x_train_permission = permission_selector.fit_transform(x_train_permission, y_train)
    # 提取出的权限特征
    selected_permission_feature_names = [permission_feature_names[i] for i in
                                         permission_selector.get_support(indices=True)]
    return selected_x_train_permission, selected_permission_feature_names


def select_string(k):
    '''
    :param k: 提取的特征个数
    :return:
    '''
    global x_train_string
    global string_feature_names

    string_selector = SelectKBest(chi2, k=15)
    selected_string = string_selector.fit_transform(x_train_string, y_train)
    selected_string_feature_names = [string_feature_names[i] for i in string_selector.get_support(indices=True)]
    return selected_string, selected_string_feature_names


def concatenate_feature(permission_feature, string_feature):
    # 将稀疏矩阵转化为密集矩阵
    string_feature = string_feature.todense()
    return np.hstack((permission_feature, string_feature))


def main():
    step = 5
    for i in range(2, 10):
        selected_permission, selected_permission_names = select_permission(step * i)
        for j in range(2, 10):
            selected_sting, selected_string_names = select_string(step * j)
            x_train = concatenate_feature(selected_permission, selected_sting)
            classifier = MultinomialNB()

            # 仅仅使用permission属性进行训练
            permission_predicted = cross_validation.cross_val_predict(classifier, selected_permission, y_train, cv=5)
            permission_accuracy = metrics.accuracy_score(y_train, permission_predicted)

            # 仅仅使用string进行训练
            string_predicted = cross_validation.cross_val_predict(classifier, selected_sting, y_train, cv=5)
            string_accuracy = metrics.accuracy_score(y_train, string_predicted)

            # 使用混合属性进行训练
            predicted = cross_validation.cross_val_predict(classifier, x_train, y_train, cv=5)
            accuracy = metrics.accuracy_score(y_train, predicted)

            print(
            'permission number %d, string number %d, total number %d,permission accuracy=> %f,string accuracy %f,accuracy %f' % (
                step * i, step * j, step * (i + j), permission_accuracy, string_accuracy, accuracy))


main()