#coding: utf-8
import argparse

from androguard.misc import *
from androguard.core.bytecodes.apk import *
import pymysql
import setting
import sys
import multiprocessing
mysql_con=pymysql.connect(**setting.DATABASE['mysql'])

def extract_apk_permisson(path,is_malware):
    apk=APK(path)
    cursor=mysql_con.cursor()
    try:
        if apk.is_valid_APK():
            package=apk.get_package()
            permissions=apk.get_permissions()

            # clean repeat permission
            simple_permissions=set()
            for p in permissions:
                simple_permissions.add(p.split('.')[-1])

            insert_sql='insert into apk_permission(package,isMalware,'
            attrs=''
            per_num=0
            for permission in simple_permissions:
                query_sql="select * from permission where name='%s'"%(permission)
                cursor.execute(query_sql)
                result=cursor.fetchone()
                # check permission is tracing
                if result:
                    attrs=attrs+permission+','
                    per_num=per_num+1
            attrs=attrs.rstrip(',')
            values="values ('%s',%d,"%(package,is_malware)
            for i in range(per_num):
                values=values+'1,'
            values=values.rstrip(',')
            values=values+')'
            insert_sql=insert_sql+attrs+') '+values
            cursor.execute(insert_sql)
            mysql_con.commit()
            print ('analysis %s'%(path))
        else:
            print('%s is not valid apk'%(path))
    except:
        etype, evalue, tracebackObj = sys.exc_info()[:3]
        print ('apk:%s errortype:%s errorvalue:%s'%(path,etype,evalue))
    cursor.close()

def mutil_process_analysis():
    pool=multiprocessing.Pool(processes=args.process)
    items=[]
    for root, dirs, files in os.walk(args.malware_path):
        for name in files:
            items.append((os.path.join(root,name),1))

    for root, dirs, files in os.walk(args.begin_path):
        for name in files:
            items.append((os.path.join(root,name),0))
    items=set(items)
    for item in items:
        pool.apply_async(extract_apk_permisson,item)

    pool.close()
    pool.join()
    print('finish work')

if __name__=='__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-P", "--process", default=30,type=int,
                        help="process number")
    parser.add_argument("-M", "--malware_path", default='/home/tuomao/Desktop/malware/',
                        help="malware path")
    parser.add_argument("-B", "--begin_path", default='/home/tuomao/Desktop/begin/',
                        help="bengin android software path")
    args=parser.parse_args()
    mutil_process_analysis()

