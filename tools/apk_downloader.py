# coding: utf-8
import argparse
import os
import time

import sys

__author__ = 'tuomao'
import requests
import multiprocessing
SAVE_DIR='./'
TASK_NUM=3185
FINISH_TASK_NUM=0
FAIL_NUM=0
FALI_TASKS=[]
def downloader(url):
    global TASK_NUM
    global FINISH_TASK_NUM
    global FAIL_NUM
    global FALI_TASKS
    try:
        url=eval(url)
        for apk_url,category in url.items():
            save_dir=SAVE_DIR+category
            filename=apk_url.split('/')[-1]
            save_path=os.path.join(save_dir,filename)
            if not os.path.exists(save_dir):
                os.makedirs(save_dir)

            if (not os.path.exists(save_path)) or os.stat(save_path).st_size==0:

                result=requests.get(apk_url).content
                file=open(save_path,'wb+')
                file.write(result)
                file.flush()
                file.close()
                print('downloading:%s savepath:%s'%(apk_url,save_path))
            else:
                print(save_path+'is exits')
            FINISH_TASK_NUM=FINISH_TASK_NUM+1
    except:
        etype, evalue, tracebackObj = sys.exc_info()[:3]
        print ('url:%s errortype:%s errorvalue:%s'%(url,etype,evalue))
        FAIL_NUM=FAIL_NUM+1
        FALI_TASKS.append(url)

def count_progress():
    while True:
        time.sleep(60)
        print('task number:%d,finish task number:%d,fail number:%d'%(TASK_NUM,FINISH_TASK_NUM,FAIL_NUM))

def mutil_process_download(file_path):
    file=open(file_path,'r')
    pool=multiprocessing.Pool(processes=args.process)
    progress=multiprocessing.Process(target=count_progress,args=())
    # progress.daemon=True
    progress.start()
    for line in file:
        pool.apply(downloader,(line,))

    pool.close()
    progress.terminate()
    progress.join()
    pool.join()

    print('finish task')

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-P", "--source_path", default="./output.txt",
                        help="download file path")
    parser.add_argument("-S", "--save_path", default="./",
                        help="save file path")
    parser.add_argument("-N", "--process", default=5, type=int,
                        help="process number")
    args=parser.parse_args()
    SAVE_DIR=args.save_path
    mutil_process_download(args.source_path)
