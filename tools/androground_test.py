#coding: utf-8
from  androguard.misc import  *
from androguard.core.analysis.analysis import *
from model import dbsetting
from torndb import Connection
from model import db_tool
API_PACKAGE_LIST=['Landroid','Lcom/android','Ldalvik','Ljava','Ljavax','Ljunit','Lorg']

# a,d,dx=AnalyzeAPK('/home/tuomao/Gen_Signature_Android1f09c7.apk')
a,d,dx=AnalyzeAPK('/home/tuomao/light.apk')
d.set_vmanalysis( dx )
d.create_xref()

package_name=a.get_package().replace('.','/')
package_name='L'+package_name

# paths=dx.get_permissions(['android.permission.READ_PHONE_STATE'])['android.permission.READ_PHONE_STATE']
# show_Paths(d,paths)
pks=dx.get_tainted_packages()
print 1

# dbtool=db_tool.DbTool(Connection(dbsetting.DATABASE['mysql']))


for m in d.get_methods():
    m.get
    class_name=m.get_class_name()
    # m.pretty_show()
    for package in API_PACKAGE_LIST:
        if class_name.startswith(package):
            break;
    else:
        xref_to_items=m.XREFto.items
        xref_to_items.extend(m.XREFfrom.items)
        for item in xref_to_items:
            # item method ,EncodedMethod type
            # item_paths list type
            item_method,item_paths=item[0],item[1]
            for path in item_paths:
                show_Path(d,path)

            # method_class_name=item_method.get_class_name()
            # for package in API_PACKAGE_LIST:
            #     if method_class_name.startswith(package):
            #         # for path in item_paths:
            #         #     show_Path(d,path)
            #         # break;
            #         md=method_class_name.replace('/','.').rstrip(';').lstrip('L')+'.'+item_method.get_name()
            #         # dbtool.insert_method(md)
            #         print md
            #         caller_name=m.get_class_name().replace('/','.').rstrip(';').lstrip('L')+'.'+m.get_name()
                    # dbtool.insert_apk_method(a.get_package(),caller_name,md)

    # if class_name.startswith(package_name):
    #     #
    #     xref_to_items=m.XREFto.items
    #     for item in xref_to_items:
    #         # item method ,EncodedMethod type
    #         # item_paths list type
    #         item_method,item_paths=item[0],item[1]
    #         method_class_name=item_method.get_class_name()
    #         for package in API_PACKAGE_LIST:
    #             if method_class_name.startswith(package):
    #                 for path in item_paths:
    #                     show_Path(d,path)
    #                 break;

