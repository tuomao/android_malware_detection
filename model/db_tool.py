# coding: utf-8
import torndb

__author__ = 'tuomao'
from model import dbsetting
import numpy as np

NONE_LIST_RETURN = []
NONE_DICT_RETURN = {}


class DbTool(object):
    def __init__(self, con):
        self.db = con

    def get_permissions(self):
        query = 'select name from permission'
        result = self.db.query(query)
        if result:
            return result
        return NONE_LIST_RETURN

    def get_apk_attribute_rate(self, attr, value, count):
        '''
        :param attr:
        :param value:
        :param count:
        :return:
        '''
        f_count_query = 'select count(package) FROM apk_permission WHERE %s=%d' % (attr, value)
        f_count = self.db.query(f_count_query)
        return f_count / count

    def tracking_file(self, file):

        sql = "insert into files(path,is_malware) values ('%s',%d)" % (file[0], file[1])
        print(sql)
        self.db.insert(sql)

    def get_un_tracking_files(self, files):
        get_tacking_file_sql = 'select path from files'

        def _filter_f(item):
            for f in tacking_files:
                if item[0] == f['path'].encode('utf-8'):
                    return True
            return False

        tacking_files = self.db.query(get_tacking_file_sql)
        un_tracking_files = [file for file in files if not _filter_f(file)]
        return un_tracking_files

    def check_method_exists(self, method_name):
        sql = "select * from method WHERE name='%s'" % (method_name)
        result = self.db.get(sql)
        if result:
            return True
        return False

    def insert_method(self, name, path=''):
        if self.check_method_exists(name):
            sql = "insert into method(name,path) values('%s','%s')" % (name, path)
            self.db.insert(sql)

    def insert_apk_method(self, package, caller_name, method_name):
        sql = "insert into apk_method(package,caller_name,method_name) VALUES('%s','%s','%s')" % (
        package, caller_name, method_name)
        self.db.insert(sql)

    def get_permission_list(self):
        query = 'select name from permission'
        result = self.db.query(query)
        permissions = [item['name'] for item in result]
        return permissions

    def get_new_permission_list(self):
        query = 'select name from permission_list'
        result = self.db.query(query)
        permissions = [item['name'] for item in result]
        permissions.remove('BIND_QUICK_SETTINGS_TILE')
        permissions.remove('BIND_SCREENING_SERVICE')
        permissions.remove('BIND_VR_LISTENER_SERVICE')
        return permissions

    def get_train_data(self):

        permission_list = self.get_permission_list()
        permission_strs = ','.join(permission_list)
        conditions = " where usage_quantity>2 and string!=''  order by package desc  limit 1500"

        query_permissions = "select %s from apk_permission %s" % (permission_strs, conditions)
        query_strings = 'select string from apk_permission %s' % (conditions)
        query_targets = 'select category from apk_permission %s' % (conditions)

        data_permissions = self.db.query(query_permissions)
        data_strs = self.db.query(query_strings)
        data_targets = self.db.query(query_targets)

        train_data = {
            'permission-data': [item.values() for item in data_permissions],
            'string-data': [item['string'] for item in data_strs],
            'target': [item['category'] for item in data_targets]
        }

        return train_data


    def get_new_train_data(self):

        permission_strs = ','.join(self.get_permission_list())
        categories = ['music-audio', 'personalization', 'social', 'communication']
        categories_string = "('" + "','".join(categories) + "')"

        conditions = " where usage_quantity>2 and button_string!='' and category in  %s  order by package desc" % (categories_string)
        # conditions=" where usage_quantity>2 and button_string!='' order by package desc"

        query = "select string, category,%s from apk_permission %s" % (permission_strs, conditions)

        results = self.db.query(query)
        permissions = []
        strings = []
        targets = []
        permission_list = None
        datas = []

        for item in results:

            string=item['string']
            strings.append(string)
            targets.append(item['category'])
            del item['string']
            del item['category']
            permissions.append(item.values())
            if not permission_list:
                permission_list = item.keys()

        train_data = {
            'permission-data': permissions,
            'string-data': strings,
            'target': targets,
        }

        return train_data, permission_list

    def get_test_data(self):

        permission_strs = ','.join(self.get_permission_list())
        conditions = " where usage_quantity>2 and string!=''  order by package desc  limit 1500,1700"

        query_permissions = "select %s from apk_permission %s" % (permission_strs, conditions)
        query_strings = 'select string from apk_permission %s' % (conditions)
        query_targets = 'select category from apk_permission %s' % (conditions)

        data_permissions = self.db.query(query_permissions)
        data_strs = self.db.query(query_strings)
        data_targets = self.db.query(query_targets)

        train_data = {
            'permission-data': [item.values() for item in data_permissions],
            'string-data': [item['string'] for item in data_strs],
            'target': [item['category'] for item in data_targets]
        }

        return train_data